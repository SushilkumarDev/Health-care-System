{"version":3,"file":"transaction.js","sources":["../../../src/tracing/transaction.ts"],"sourcesContent":["import type {\n  Context,\n  Contexts,\n  DynamicSamplingContext,\n  MeasurementUnit,\n  Measurements,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionEvent,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger, timestampInSeconds } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport { spanToTraceContext } from '../utils/spanUtils';\nimport { getDynamicSamplingContextFromClient } from './dynamicSamplingContext';\nimport { Span as SpanClass, SpanRecorder } from './span';\nimport { ensureTimestampInSeconds } from './utils';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public metadata: TransactionMetadata;\n\n  /**\n   * The reference to the current hub.\n   */\n  public _hub: Hub;\n\n  private _name: string;\n\n  private _measurements: Measurements;\n\n  private _contexts: Contexts;\n\n  private _trimEnd?: boolean;\n\n  private _frozenDynamicSamplingContext: Readonly<Partial<DynamicSamplingContext>> | undefined;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n    // We need to delete description since it's set by the Span class constructor\n    // but not needed for transactions.\n    delete this.description;\n\n    this._measurements = {};\n    this._contexts = {};\n\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this.metadata = {\n      source: 'custom',\n      ...transactionContext.metadata,\n      spanMetadata: {},\n    };\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this.metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };\n    }\n  }\n\n  /** Getter for `name` property */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Setter for `name` property, which also sets `source` as custom.\n   */\n  public set name(newName: string) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.setName(newName);\n  }\n\n  /**\n   * Setter for `name` property, which also sets `source` on the metadata.\n   *\n   * @deprecated Use `updateName()` and `setMetadata()` instead.\n   */\n  public setName(name: string, source: TransactionMetadata['source'] = 'custom'): void {\n    this._name = name;\n    this.metadata.source = source;\n  }\n\n  /** @inheritdoc */\n  public updateName(name: string): this {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): void {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMeasurement(name: string, value: number, unit: MeasurementUnit = ''): void {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMetadata(newMetadata: Partial<TransactionMetadata>): void {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public end(endTimestamp?: number): string | undefined {\n    const timestampInS =\n      typeof endTimestamp === 'number' ? ensureTimestampInSeconds(endTimestamp) : timestampInSeconds();\n    const transaction = this._finishTransaction(timestampInS);\n    if (!transaction) {\n      return undefined;\n    }\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    // eslint-disable-next-line deprecation/deprecation\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    // eslint-disable-next-line deprecation/deprecation\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name || '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   */\n  public getDynamicSamplingContext(): Readonly<Partial<DynamicSamplingContext>> {\n    if (this._frozenDynamicSamplingContext) {\n      return this._frozenDynamicSamplingContext;\n    }\n\n    const hub = this._hub || getCurrentHub();\n    const client = hub.getClient();\n\n    if (!client) return {};\n\n    const scope = hub.getScope();\n    const dsc = getDynamicSamplingContextFromClient(this.traceId, client, scope);\n\n    const maybeSampleRate = this.metadata.sampleRate;\n    if (maybeSampleRate !== undefined) {\n      dsc.sample_rate = `${maybeSampleRate}`;\n    }\n\n    // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n    const source = this.metadata.source;\n    if (source && source !== 'url') {\n      dsc.transaction = this.name;\n    }\n\n    if (this.sampled !== undefined) {\n      dsc.sampled = String(this.sampled);\n    }\n\n    // Uncomment if we want to make DSC immutable\n    // this._frozenDynamicSamplingContext = dsc;\n\n    return dsc;\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n  public setHub(hub: Hub): void {\n    this._hub = hub;\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  protected _finishTransaction(endTimestamp?: number): TransactionEvent | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.end(endTimestamp);\n\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const metadata = this.metadata;\n\n    const transaction: TransactionEvent = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: spanToTraceContext(this),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        dynamicSamplingContext: this.getDynamicSamplingContext(),\n      },\n      ...(metadata.source && {\n        transaction_info: {\n          source: metadata.source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    DEBUG_BUILD && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return transaction;\n  }\n}\n"],"names":["SpanClass"],"mappings":"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"}