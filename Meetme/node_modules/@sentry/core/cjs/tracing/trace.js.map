{"version":3,"file":"trace.js","sources":["../../../src/tracing/trace.ts"],"sourcesContent":["import type { Span, TransactionContext } from '@sentry/types';\nimport { dropUndefinedKeys, logger, tracingContextFromHeaders } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getCurrentScope, withScope } from '../exports';\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n *\n * This function is meant to be used internally and may break at any time. Use at your own risk.\n *\n * @internal\n * @private\n *\n * @deprecated Use `startSpan` instead.\n */\nexport function trace<T>(\n  context: TransactionContext,\n  callback: (span?: Span) => T,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onError: (error: unknown, span?: Span) => void = () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  afterFinish: () => void = () => {},\n): T {\n  const ctx = normalizeContext(context);\n\n  const hub = getCurrentHub();\n  const scope = getCurrentScope();\n  const parentSpan = scope.getSpan();\n\n  const activeSpan = createChildSpanOrTransaction(hub, parentSpan, ctx);\n\n  scope.setSpan(activeSpan);\n\n  return handleCallbackErrors(\n    () => callback(activeSpan),\n    error => {\n      activeSpan && activeSpan.setStatus('internal_error');\n      onError(error, activeSpan);\n    },\n    () => {\n      activeSpan && activeSpan.end();\n      scope.setSpan(parentSpan);\n      afterFinish();\n    },\n  );\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startSpan<T>(context: TransactionContext, callback: (span: Span | undefined) => T): T {\n  const ctx = normalizeContext(context);\n\n  return withScope(scope => {\n    const hub = getCurrentHub();\n    const parentSpan = scope.getSpan();\n\n    const activeSpan = createChildSpanOrTransaction(hub, parentSpan, ctx);\n    scope.setSpan(activeSpan);\n\n    return handleCallbackErrors(\n      () => callback(activeSpan),\n      () => {\n        // Only update the span status if it hasn't been changed yet\n        if (activeSpan && (!activeSpan.status || activeSpan.status === 'ok')) {\n          activeSpan.setStatus('internal_error');\n        }\n      },\n      () => activeSpan && activeSpan.end(),\n    );\n  });\n}\n\n/**\n * @deprecated Use {@link startSpan} instead.\n */\nexport const startActiveSpan = startSpan;\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startSpanManual<T>(\n  context: TransactionContext,\n  callback: (span: Span | undefined, finish: () => void) => T,\n): T {\n  const ctx = normalizeContext(context);\n\n  return withScope(scope => {\n    const hub = getCurrentHub();\n    const parentSpan = scope.getSpan();\n\n    const activeSpan = createChildSpanOrTransaction(hub, parentSpan, ctx);\n    scope.setSpan(activeSpan);\n\n    function finishAndSetSpan(): void {\n      activeSpan && activeSpan.end();\n    }\n\n    return handleCallbackErrors(\n      () => callback(activeSpan, finishAndSetSpan),\n      () => {\n        // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n        if (activeSpan && !activeSpan.endTimestamp && (!activeSpan.status || activeSpan.status === 'ok')) {\n          activeSpan.setStatus('internal_error');\n        }\n      },\n    );\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate` or `tracesSampler`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startInactiveSpan(context: TransactionContext): Span | undefined {\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n\n  const ctx = { ...context };\n  // If a name is set and a description is not, set the description to the name.\n  if (ctx.name !== undefined && ctx.description === undefined) {\n    ctx.description = ctx.name;\n  }\n\n  const hub = getCurrentHub();\n  const parentSpan = getActiveSpan();\n  return parentSpan ? parentSpan.startChild(ctx) : hub.startTransaction(ctx);\n}\n\n/**\n * Returns the currently active span.\n */\nexport function getActiveSpan(): Span | undefined {\n  return getCurrentScope().getSpan();\n}\n\nexport function continueTrace({\n  sentryTrace,\n  baggage,\n}: {\n  sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n  baggage: Parameters<typeof tracingContextFromHeaders>[1];\n}): Partial<TransactionContext>;\nexport function continueTrace<V>(\n  {\n    sentryTrace,\n    baggage,\n  }: {\n    sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n    baggage: Parameters<typeof tracingContextFromHeaders>[1];\n  },\n  callback: (transactionContext: Partial<TransactionContext>) => V,\n): V;\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers,\n * or in the browser from `<meta name=\"sentry-trace\">` and `<meta name=\"baggage\">` HTML tags.\n *\n * The callback receives a transactionContext that may be used for `startTransaction` or `startSpan`.\n */\nexport function continueTrace<V>(\n  {\n    sentryTrace,\n    baggage,\n  }: {\n    sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n    baggage: Parameters<typeof tracingContextFromHeaders>[1];\n  },\n  callback?: (transactionContext: Partial<TransactionContext>) => V,\n): V | Partial<TransactionContext> {\n  const currentScope = getCurrentScope();\n\n  const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(\n    sentryTrace,\n    baggage,\n  );\n\n  currentScope.setPropagationContext(propagationContext);\n\n  if (DEBUG_BUILD && traceparentData) {\n    logger.log(`[Tracing] Continuing trace ${traceparentData.traceId}.`);\n  }\n\n  const transactionContext: Partial<TransactionContext> = {\n    ...traceparentData,\n    metadata: dropUndefinedKeys({\n      dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n    }),\n  };\n\n  if (!callback) {\n    return transactionContext;\n  }\n\n  return callback(transactionContext);\n}\n\nfunction createChildSpanOrTransaction(\n  hub: Hub,\n  parentSpan: Span | undefined,\n  ctx: TransactionContext,\n): Span | undefined {\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n  return parentSpan ? parentSpan.startChild(ctx) : hub.startTransaction(ctx);\n}\n\nfunction normalizeContext(context: TransactionContext): TransactionContext {\n  const ctx = { ...context };\n  // If a name is set and a description is not, set the description to the name.\n  if (ctx.name !== undefined && ctx.description === undefined) {\n    ctx.description = ctx.name;\n  }\n\n  return ctx;\n}\n"],"names":["hub","getCurrentHub","getCurrentScope","handleCallbackErrors","withScope","hasTracingEnabled","tracingContextFromHeaders","DEBUG_BUILD","logger","dropUndefinedKeys"],"mappings":"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"}