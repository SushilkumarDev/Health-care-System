/** This function adds duration since Sentry was initialized till the time event was sent */
export declare const SessionTiming: import("@sentry/types").Integration & {
    new (): import("@sentry/types").Integration & {
        name: string;
        processEvent(event: import("@sentry/types").Event): {
            extra: {
                "session:start": number;
                "session:duration": number;
                "session:end": number;
            };
            event_id?: string | undefined;
            message?: string | undefined;
            timestamp?: number | undefined;
            start_timestamp?: number | undefined;
            level?: import("@sentry/types").SeverityLevel | import("@sentry/types").Severity | undefined;
            platform?: string | undefined;
            logger?: string | undefined;
            server_name?: string | undefined;
            release?: string | undefined;
            dist?: string | undefined;
            environment?: string | undefined;
            sdk?: import("@sentry/types").SdkInfo | undefined;
            request?: import("@sentry/types").Request | undefined;
            transaction?: string | undefined;
            modules?: {
                [key: string]: string;
            } | undefined;
            fingerprint?: string[] | undefined;
            exception?: {
                values?: import("@sentry/types").Exception[] | undefined;
            } | undefined;
            breadcrumbs?: import("@sentry/types").Breadcrumb[] | undefined;
            contexts?: import("@sentry/types").Contexts | undefined;
            tags?: {
                [key: string]: import("@sentry/types").Primitive;
            } | undefined;
            user?: import("@sentry/types").User | undefined;
            type?: import("@sentry/types").EventType;
            spans?: import("@sentry/types").Span[] | undefined;
            measurements?: import("@sentry/types").Measurements | undefined;
            debug_meta?: import("@sentry/types").DebugMeta | undefined;
            sdkProcessingMetadata?: {
                [key: string]: any;
            } | undefined;
            transaction_info?: {
                source: import("@sentry/types").TransactionSource;
            } | undefined;
            threads?: {
                values: import("@sentry/types").Thread[];
            } | undefined;
        };
    } & {
        setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
    };
    id: string;
};
//# sourceMappingURL=sessiontiming.d.ts.map