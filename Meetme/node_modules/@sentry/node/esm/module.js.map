{"version":3,"file":"module.js","sources":["../../src/module.ts"],"sourcesContent":["import { posix, sep } from 'path';\nimport { dirname } from '@sentry/utils';\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path: string): string {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n// We cache this so we don't have to recompute it\nlet basePath: string | undefined;\n\nfunction getBasePath(): string {\n  if (!basePath) {\n    const baseDir =\n      require && require.main && require.main.filename ? dirname(require.main.filename) : global.process.cwd();\n    basePath = `${baseDir}/`;\n  }\n\n  return basePath;\n}\n\n/** Gets the module from a filename */\nexport function getModuleFromFilename(\n  filename: string | undefined,\n  basePath: string = getBasePath(),\n  isWindows: boolean = sep === '\\\\',\n): string | undefined {\n  if (!filename) {\n    return;\n  }\n\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n  const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n  // eslint-disable-next-line prefer-const\n  let { dir, base: file, ext } = posix.parse(normalizedFilename);\n\n  if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n    file = file.slice(0, ext.length * -1);\n  }\n\n  if (!dir) {\n    // No dirname whatsoever\n    dir = '.';\n  }\n\n  let n = dir.lastIndexOf('/node_modules');\n  if (n > -1) {\n    return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\n  }\n\n  // Let's see if it's a part of the main module\n  // To be a part of main module, it has to share the same base\n  n = `${dir}/`.lastIndexOf(normalizedBase, 0);\n  if (n === 0) {\n    let moduleName = dir.slice(normalizedBase.length).replace(/\\//g, '.');\n\n    if (moduleName) {\n      moduleName += ':';\n    }\n    moduleName += file;\n\n    return moduleName;\n  }\n\n  return file;\n}\n"],"names":[],"mappings":";;;AAGA;AACA,SAAS,oBAAoB,CAAC,IAAI,EAAkB;AACpD,EAAE,OAAO,IAAA;AACT,KAAK,OAAO,CAAC,SAAS,EAAE,EAAE,CAAA;AAC1B,KAAK,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;AACxB,CAAA;AACA;AACA;AACA,IAAI,QAAQ,CAAA;AACZ;AACA,SAAS,WAAW,GAAW;AAC/B,EAAE,IAAI,CAAC,QAAQ,EAAE;AACjB,IAAI,MAAM,OAAQ;AAClB,MAAM,OAAA,IAAW,OAAO,CAAC,IAAA,IAAQ,OAAO,CAAC,IAAI,CAAC,QAAA,GAAW,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAE,GAAE,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAA;AAC9G,IAAI,QAAA,GAAW,CAAC,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAA,QAAA,CAAA;AACA,CAAA;AACA;AACA;AACA,SAAA,qBAAA;AACA,EAAA,QAAA;AACA,EAAA,QAAA,GAAA,WAAA,EAAA;AACA,EAAA,SAAA,GAAA,GAAA,KAAA,IAAA;AACA,EAAA;AACA,EAAA,IAAA,CAAA,QAAA,EAAA;AACA,IAAA,OAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,cAAA,GAAA,SAAA,GAAA,oBAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;AACA,EAAA,MAAA,kBAAA,GAAA,SAAA,GAAA,oBAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;AACA;AACA;AACA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,KAAA,CAAA,KAAA,CAAA,kBAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,GAAA,KAAA,KAAA,IAAA,GAAA,KAAA,MAAA,IAAA,GAAA,KAAA,MAAA,EAAA;AACA,IAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,IAAA,CAAA,GAAA,EAAA;AACA;AACA,IAAA,GAAA,GAAA,GAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,IAAA,CAAA,GAAA,GAAA,CAAA,WAAA,CAAA,eAAA,CAAA,CAAA;AACA,EAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,EAAA,GAAA,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA,EAAA,CAAA,GAAA,CAAA,EAAA,GAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CAAA,cAAA,EAAA,CAAA,CAAA,CAAA;AACA,EAAA,IAAA,CAAA,KAAA,CAAA,EAAA;AACA,IAAA,IAAA,UAAA,GAAA,GAAA,CAAA,KAAA,CAAA,cAAA,CAAA,MAAA,CAAA,CAAA,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA;AACA;AACA,IAAA,IAAA,UAAA,EAAA;AACA,MAAA,UAAA,IAAA,GAAA,CAAA;AACA,KAAA;AACA,IAAA,UAAA,IAAA,IAAA,CAAA;AACA;AACA,IAAA,OAAA,UAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAA,IAAA,CAAA;AACA;;;;"}